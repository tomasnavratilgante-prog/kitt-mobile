import Tts from 'react-native-tts'; import { parseIntent } from './intents'; import { Memory } from './memory'; import { MusicController } from './musicController'; import { NavService } from './navService'; import { RadarDB } from './radarDb'; import { MapSdkBridge } from '../bridges/mapSdkBridge'; function pick(a){return a[Math.floor(Math.random()*a.length)];}
export class KittCore{constructor(d){this.d=d;} async say(text){ const rules = this.d.memory.listRules ? this.d.memory.listRules() : []; const noInterrupt = rules.some(r=>/(nezasahovat|nepřerušovat|mlčet)/i.test(r.raw)); if(noInterrupt && !/radar|trasa|příjezd|cí/i.test(text.toLowerCase())) return; try{ await Tts.speak(text);}catch(e){} } async handle(utterance){ const intent = parseIntent(utterance); if(!intent) return; switch(intent.type){ case 'Greet': return this.say('Vše funkční. Systém připraven.'); case 'AddPassenger': { const p = this.d.memory.addPerson(intent.name); return this.say(`${p.name}. Zaznamenáno.`);} case 'AddRule': { const r = this.d.memory.addRule(intent.raw); return this.say('Pravidlo zapsáno.'); } case 'ListRules': { const list=this.d.memory.listRules(); if(list.length===0) return this.say('Žádná pravidla nejsou nastavena.'); const short=list.map(l=>`${l.id}: ${l.raw}`).slice(0,5).join('; '); return this.say(`Aktivní pravidla: ${short}`);} case 'NavigateTo': { const route = await this.d.nav.setDestination(intent.destination); const eta = new Date(Date.now()+route.etaMin*60000); const hh = String(eta.getHours()).padStart(2,'0'), mm=String(eta.getMinutes()).padStart(2,'0'); await this.say(`Trasa nastavena. ${route.distanceKm} km, ${route.etaMin} minut. Příjezd kolem ${hh}:${mm}.`); // If native Map SDK is available, ask bridge to start in-app navigation if destination parse to coords
        try{ if(typeof intent.destination==='string' && intent.destination.match(/,|[0-9]/)){ const parts = intent.destination.split(',').map(s=>s.trim()); const lat = parseFloat(parts[0]); const lon = parseFloat(parts[1]); if(!isNaN(lat)&&!isNaN(lon)) MapSdkBridge.setDestination(lat,lon,intent.destination); } }catch(e){} const unsub = this.d.nav.onProgress(_=>{ const near = this.d.radar.nearest(); if(near.length>0){ const r=pick(near); this.say(`${r.place} – radar ${r.hint||''}.`); } }); setTimeout(()=>unsub(),2*60*1000); return;} case 'PlayMusic': { const q = intent.query && intent.query.length>0 ? intent.query : this.pickByContext(); await this.d.music.play(q); return this.say('Spouštím hudbu.'); } default: return this.say('Tohle si nechám na jindy.'); } } pickByContext(){ const dna=this.d.memory.getDNA(); const pool=[]; Object.entries(dna).forEach(([b,s])=>{ for(let i=0;i<Math.max(1,s);i++) pool.push(b); }); const band=pick(pool); const table={'Linkin Park':['Numb'],'Three Days Grace':['Animal I Have Become'],'Seether':['Fake It'],'Nickelback':['How You Remind Me'],'Disturbed':['Indestructible'],'Beast in Black':['Blind and Frozen'],'Rihanna':['Don’t Stop the Music'],'The Killers':['Mr. Brightside']}; const songs=table[band]||['Best Of']; return `${band} ${pick(songs)}`; } } export const createKitt=(deps)=>new KittCore(deps);